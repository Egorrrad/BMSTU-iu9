(load "tests.rkt")

(define (derivative xss)
  (define (der xss)
    (if (or (not (list? xss)) (= (length xss) 1))
        (if (list? xss)
            (cond
              ((equal? (car xss) 'x) 1)
              ((equal? (car xss) '-x) -1)
              ((number? (car xss)) 0))
            (if (equal? xss 'x)
                1
                0))
        (cond
          ((equal? (car xss) '*)
           (if (= (length xss) 3)
               (let ((u (cadr xss)) (v (caddr xss)))
                 (if (number? u)
                   (append (list '* u) (list (der v)))
                   (if (number? v)
                       (append (list '* v) (list (der u)))
                       (if (not (or (list? u) (list? v)))
                           (if (and (equal? u 'x) (equal? v 'x))
                               '(* 2 x)
                               (if (equal? u 'x)
                                   v
                                   u))
                           (list '+ (list '* u (der v)) (list '* (der u) v))))))
               
               (let ((u (cadr xss)) (v (cons '* (cddr xss))))
                 (der (list '* u v)))))
          ((equal? (car xss) '+)
           (cons '+ (map der (cdr xss))))
          ((equal? (car xss) '-)
           (cons '- (map der (cdr xss))))
          ((equal? (car xss) '/)
           (if (= (length xss) 3)
               (let ((u (cadr xss)) (v (caddr xss)))
                 (if (not (or (list? u) (list? v)))
                     (if (or (equal? u 'x) (equal? v 'x))
                         (if (and (number? v) (equal? u 'x))
                             (list '/ 1 v)
                             (if (and (number? u) (equal? v 'x))
                                 (list '/ (list '* '-1 u) (list 'expt 'x 2)))))
                     (if (number? u)
                         (list '/ (list '- (list '* u (der v))) (list 'expt v '2))
                         (if (number? v)
                             (list '/ (der (caddr xss)) v)
                             (list '/
                                   (list '- (list '* (der u) v)
                                         (list '* u (der v)))
                                   (list 'expt v '2))))))))
          ((equal? (car xss) 'expt)
             (let ((a (cadr xss)) (b (caddr xss)))
               (if (equal? a 'e)
                   (if (list? b)
                       (list '* (der b) (cdr xss))
                       xss)
                   (cond
                     ((number? a)
                      (if (list? b)
                          (list '* xss (list 'log a) (der b))
                          (list '* xss (list 'log a))))
                     ((equal? a 'x)
                      (if (list? b)
                          (list '* (der b) b (list 'expt a (list '- b 1)))
                          (list '* b (list 'expt a  (- b 1)))))))))
          ((equal? (car xss) 'exp)
           (if (list? (cadr xss))
               (list '* xss (der (cadr xss)))
               xss))
          ((equal? (car xss) 'log)
           (let ((a (cadr xss)))
             (if (list? a)
                 (list '* (list '/ 1 a) (der a))
                 (list '/ 1 a))))
          ((equal? (car xss) 'sin)
           (let ((a (cadr xss)))
             (if (list? a)
                 (list '* (list 'cos a) (der a))
                 (list 'cos a))))
          ((equal? (car xss) 'cos)
           (let ((a (cadr xss)))
             (if (list? a)
                 (list '* '-1 (list '* (list 'sin a) (der a)))
                 (list '* '-1 (list 'sin a))))))))
                   
      
  (der xss))
          

(define (simplify x)
  (define (razb xs)
    (if (= (length xs) 3)
        xs
        (cond
          ((equal? (car xs) '+)
           (list '+ (cadr xs) (razb (cons '+ (cddr xs))))
           )
          ((equal? (car xs) '-)
           (list '- (cadr xs) (razb (cons '- (cddr xs))))
           )
          ((equal? (car xs) '*)
           (list '* (cadr xs) (razb (cons '* (cddr xs))))
           )
          )))
  (define (loop x)
    (if (null? x) 
        #f   
        (if (equal? x 'x)
            'x
            (if (and (list? x) (> (length x) 3))
                (if (equal? (car x) 'cos)
                    (list 'cos (loop (razb (cdr x))))
                    (loop (razb x)))
                (cond
                  ((equal? (car x) '*)
                   (if (number? (cadr x))
                       (cond
                         ((= (cadr x) 0) 0)
                         ((= (cadr x) 1)
                         (if (list? (caddr x))
                             (loop (caddr x))
                             (caddr x)))
                         (else (list '* (cadr x) (loop (caddr x)))))
                       (if (number? (caddr x))
                           (cond
                             ((= (caddr x) 0) 0)
                             ((= (caddr x) 1)
                             (if (list? (cadr x))
                                 (loop (cadr x))
                                 (cadr x)))
                             (else x))
                           (if (and (list? (cadr x)) (list? (caddr x)))
                               (cond
                                 ((and (number? (loop (caddr x)))
                                       (= (loop (caddr x)) 1))
                                  (loop (cadr x)))
                                 ((and (number? (loop (cadr x)))
                                       (= (loop (cadr x)) 1))
                                   (loop (caddr x)))
                                 ((and (number? (loop (caddr x)))
                                       (number? (loop (cadr x)))
                                       (= (loop (caddr x)) 1)
                                       (= (loop (caddr x)) 1))
                                  1)
                                 (else
                                  (list '* (loop (cadr x)) (loop (caddr x)))))
                               (if (list? (caddr x))
                                   (if (and (number? (loop (caddr x)))
                                            (= (loop (caddr x)) 1))
                                       (cadr x)
                                       (list '* (loop (caddr x)) (cadr x)))
                                   (if (list? (cadr x))
                                       (if (= (loop (cadr x)) 1)
                                           (caddr x)
                                           (list '* (loop (cadr x)) (caddr x)))
                                       x))))
                                   ))
              ((equal? (car x) '+)
               (if (and (number? (cadr x)) (= (cadr x) 0))
                   (if (list? (caddr x))
                       (loop (caddr x))
                       (caddr x))
                   (if (and (number? (caddr x))
                            (= (caddr x) 0))
                       (if (list? (cadr x))
                           (loop (cadr x))
                           (cadr x))
                       (if (number? (caddr x))
                           x
                           (if (and (list? (cadr x))
                                    (list? (caddr x)))
                               (list '+ (loop (cadr x)) (loop (caddr x)))
                               (if (list? (caddr x))
                                   (if (and (number? (loop (caddr x)))
                                            (= (loop (caddr x)) 0))
                                       (cadr x)
                                       (list '+ (cadr x) (loop (caddr x))))
                                   (if (list? (cadr x))
                                       (list '+ (caddr x) (loop (cadr x)))
                                       x)))))))
               
              ((equal? (car x) '-)
               (if (and (number? (cadr x)) (= (cadr x) 0))
                   (if (list? (caddr x))
                       (loop (caddr x))
                       (caddr x))
                   (if (and (number? (caddr x))
                            (= (caddr x) 0))
                       (if (list? (cadr x))
                           (loop (cadr x))
                           (cadr x))
                       (if (number? (caddr x))
                           x
                           (if (and (list? (cadr x))
                                    (list? (caddr x)))
                               (list '- (loop (cadr x)) (loop (caddr x)))
                               (if (list? (caddr x))
                                   (if (and (number? (loop (caddr x)))
                                            (= (loop (caddr x)) 0))
                                       (cadr x)
                                       (list '- (cadr x) (loop (caddr x))))
                                   (if (list? (cadr x))
                                       (list '- (caddr x) (loop (cadr x)))
                                       x)))))))
              ((equal? (car x) 'cos)
               (list 'cos (loop (cadr x))))
              (else x)
            )))))
  (loop x)) 


(define evall (lambda (x) (eval x (interaction-environment))))

(define (my-flatten xs)
  (if (null? xs)
      '()
      (if (pair? xs)
          (append (my-flatten (car xs)) (my-flatten (cdr xs)))
          (list xs))))



(define-syntax flatten
  (syntax-rules ()
    ((_ xs)
     (eval (my-flatten 'xs)))))

(flatten '(1 (1 2)))


(define (f x y z)
  (flatten (((+ x) 3 (4 y) (((z)))) (7 y x 8))))  ;; (+ x 3 4 y z 7 y x 8)



