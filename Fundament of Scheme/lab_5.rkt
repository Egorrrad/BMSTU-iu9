(define feature-if-else #t)
(define feature-global #t)
;(define (feature-nested-if) #t)
(define feature-while-loop #t)
(define (feature-break-continue) #t)
(define (feature-switch-case) #t)
(define (feature-repeat-loop) #t)



(define (interpret commands stack)
  (define (del-el el lis)
  (define (loop el lis xl)
    (if (null? lis)
        xl
        (if (equal? (car lis) el)
            (loop el (cdr lis) xl)
            (loop el (cdr lis) (append xl (list (car lis)))))))
  (loop el lis '()))          
  (let ((slovar '())
        (call-stack '())
        (propusk-state 0)
        (globals '())
        (count 0)
        (f 1)
        (cas -1)
        (m -1)
        (k 0)
        )
    (define (what-to-do command stack)
      (cond
        ((number? command) (cons command stack))

        ((equal? command '+) (cons (+ (cadr stack) (car stack)) (cddr stack)))
        ((equal? command '-) (cons (- (cadr stack) (car stack)) (cddr stack)))
        ((equal? command '*) (cons (* (cadr stack) (car stack)) (cddr stack)))
        ((equal? command '/) (cons (quotient (cadr stack) (car stack)) (cddr stack)))
        ((equal? command 'mod) (cons (remainder (cadr stack) (car stack)) (cddr stack)))
        ((equal? command 'neg) (cons (- (car stack) ) (cdr stack)))
        
        ((equal? command '=) (cons (if (= (cadr stack) (car stack)) -1 0) (cddr stack)))
        ((equal? command '>) (cons (if (> (cadr stack) (car stack)) -1 0) (cddr stack)))
        ((equal? command '<) (cons (if (< (cadr stack) (car stack)) -1 0) (cddr stack)))

        ((equal? command 'not) (cons (if (= 0 (car stack)) -1 0) (cdr stack)))
        ((equal? command 'and) (cons (if (= (* (cadr stack) (car stack)) 0) 0 -1) (cddr stack)))
        ((equal? command 'or) (cons (if (= (+ (abs (cadr stack)) (abs (car stack))) 0) 0 -1) (cddr stack)))
        
        ((equal? command 'drop) (cdr stack))
        ((equal? command 'swap) (cons (cadr stack) (cons (car stack) (cddr stack))))
        ((equal? command 'dup) (cons (car stack) stack))
        ((equal? command 'over) (cons (cadr stack) stack))
        ((equal? command 'rot) (cons (caddr stack) (cons (cadr stack) (cons (car stack) (cdddr stack)))))
        ((equal? command 'depth) (cons (length stack) stack))
        (else #f)))
    (define (loop i commands stack)
      (define (upr-constr command stack-s)
        (cond ((equal? command 'define)
               (begin
                 (set! slovar (cons (list (vector-ref commands (+ i 1)) (+ i 2)) slovar))
                 (set! propusk-state 2)
                 stack))
              ((equal? command 'defvar)
               (begin
                 (set! globals (cons (list (vector-ref commands (+ i 1))
                                           (vector-ref commands (+ i 2))) globals))
                 (set! i (+ i 2))
                 stack))
              ((equal? command 'set)
               (let ((name (vector-ref commands (+ i 1))) (el (assoc (vector-ref commands (+ i 1)) globals)))
                 (set! globals (del-el el globals))
                 (set! globals (cons (list name (car stack)) globals))
                 (set! i (+ i 1))
                 (cdr stack)
                 ))
              ((equal? command 'end)
               (let ((call-c (car call-stack)))
                 (set! call-stack (cdr call-stack))
                 (set! i call-c)
                 (set! count 0)
                 (set! f 1)
                 stack))
              ((equal? command 'exit) (let ((call-c (car call-stack)))
                                        (set! call-stack (cdr call-stack))
                                        (set! i call-c)
                                        stack))
              ((equal? command 'if) (let ((flag (car stack)))
                                      (and (= flag 0)
                                           (set! propusk-state 3))
                                      (set! f flag)
                                      (cdr stack)))
              ((equal? command 'else)
               (if (= f 0)
                   stack
                   (begin
                    (set! propusk-state 1.5)
                    stack)))
              ((equal? command 'endif) stack)

              ((equal? command 'switch) (let ((flag (car stack)))
                                          (set! cas flag)
                                          (cdr stack)))
              ((equal? command 'case)
               (if (and (> count 1) (not (number? cas)))
                   (begin
                     (set! propusk-state 0)
                     (set! i (+ i 1))
                     stack)
                   (begin
                     (if (equal? (vector-ref commands (+ i 1)) cas)
                         (begin
                           (set! propusk-state 0)
                           (set! i (+ i 1))
                           (set! cas 'done)
                           stack)
                         (if (number? cas)
                             (begin
                               (set! propusk-state 4)
                               stack)
                             (begin
                               (set! propusk-state 5)
                               stack)))
                     (set! count (+ 1 count))
                     stack
                     )))
              ((equal? command 'endswitch) (begin
                                             (set! cas -1)
                                             stack))
              
              ((equal? command 'exitcase) (begin
                                            (set! propusk-state 5)
                                            (set! cas -1)
                                            (set! count 0)
                                            stack))
              ((equal? command 'while) (let ((flag (car stack)))
                                      (and (= flag 0)
                                           (set! propusk-state 6))
                                      (set! m (- i 1))  
                                      (cdr stack)))
              ((equal? command 'wend)
               (begin
                 (set! i m)
                 (set! propusk-state 0)
                 stack
                 ))
              ((equal? command 'break)
               (begin
                 (set! propusk-state 6)
                 stack))
              ((equal? command 'continue)
               (begin
                 (set! propusk-state 6.5)
                 stack))
              ((equal? command 'repeat)
               (begin
                 (set! m (- i 1))
                 stack))
              ((equal? command 'until)
               (let ((flag (car stack)))
                 (if (= flag 0)
                     (set! i m)
                     (set! propusk-state 0)
                     )
                 (cdr stack)))
              
              (else #f)))
      
      (if (>= i (vector-length commands))
          stack
          (cond
            ((= propusk-state 0)
             (let ((znach (upr-constr (vector-ref commands i) stack))) 
               (if znach 
                   (loop (+ i 1) commands znach)
                   (let ((user-command (assoc (vector-ref commands i) slovar))
                         (global (assoc (vector-ref commands i) globals)))
                     (cond
                       ((and user-command)
                         (begin (set! call-stack (cons i call-stack))
                                (loop (cadr user-command) commands stack)))
                       ((and global) (loop (+ i 1) commands (cons (cadr global) stack)))
                       
                       (else
                        (loop (+ i 1) commands (what-to-do (vector-ref commands i) stack))
                        ))))))
             ((= propusk-state 1)
              (if (equal? (vector-ref commands i) 'endif)
                  (if (= k 0)
                      (begin
                        (set! propusk-state 0)
                        (loop (+ i 1) commands stack))
                      (begin
                        (set! k (- k 1))
                        (loop (+ i 1) commands stack)))
                  
                    (if (equal? (vector-ref commands i) 'else)
                        (begin
                          (set! propusk-state 3)
                          (loop i commands stack))
                    (loop (+ i 1) commands stack))
                  ))
             ((= propusk-state 1.5)
              (if (equal? (vector-ref commands i) 'endif)
                  (begin
                    (set! propusk-state 0)
                    (loop (+ i 1) commands stack))
                  (loop (+ i 1) commands stack)
                  ))
              ((= propusk-state 2)
               (if (equal? (vector-ref commands i) 'end)
                   (begin
                     (set! propusk-state 0)
                     (loop (+ i 1) commands stack))
                   (loop (+ i 1) commands stack)
                   ))
              
              ((= propusk-state 3)
               (if (or (equal? (vector-ref commands i) 'else) (equal? (vector-ref commands i) 'endif))
                  (begin
                    (set! propusk-state 0)
                    (loop (+ i 1) commands stack))
                    (if (equal? (vector-ref commands i) 'if)
                        (begin
                          (set! propusk-state 1)
                          (set! k (+ k 1))
                          (loop (+ i 1) commands stack))
                        (loop (+ i 1) commands stack))
                 
                  ))
              ((= propusk-state 4)
               (if (equal? (vector-ref commands (+ i 1)) 'case)
                   (begin
                     (set! propusk-state 0)
                     (loop (+ i 1) commands stack))
                   (if (equal? (vector-ref commands (+ i 1)) 'endswitch)
                       (begin
                         (set! propusk-state 0)
                         (loop (+ i 1) commands stack))
                       (loop (+ i 1) commands stack))
                   ))
              ((= propusk-state 5)
               (if (equal? (vector-ref commands i) 'endswitch)
                   (begin
                     (set! propusk-state 0)
                     (loop (+ i 1) commands stack))
                   (loop (+ i 1) commands stack)
                   ))
              ((= propusk-state 6)
               (if (member (vector-ref commands i) '(wend until next))
                   (begin
                     (set! propusk-state 0)
                     (set! m -1)
                     (loop (+ i 1) commands stack))
                   (loop (+ i 1) commands stack)
                   ))
              ((= propusk-state 6.5)
               (if (member (vector-ref commands i) '(wend until next))
                   (begin
                     (set! propusk-state 0)
                     (loop i commands stack))
                   (loop (+ i 1) commands stack)
                   ))
              )))
      (loop 0 commands stack)
      )
    )

